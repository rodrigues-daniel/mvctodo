{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _types = require('./types');\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar ItemHandler = function ItemHandler(url, pk, fetch) {\n  var _this = this;\n\n  _classCallCheck(this, ItemHandler);\n\n  this.call = function (request, type) {\n    return _this._fetch(_this.url + '/' + _this.pk, _extends({}, request, {\n      type: type\n    }));\n  };\n\n  this.read = function () {\n    return _this.call(_types.METHOD.READ);\n  };\n\n  this.edit = function (body) {\n    return _this.call({\n      method: 'PATCH',\n      body: body\n    }, _types.METHOD.EDIT);\n  };\n\n  this.destroy = function () {\n    return _this.call({\n      method: 'DELETE'\n    }, _types.METHOD.DESTROY);\n  };\n\n  this.replace = function (body) {\n    return _this.call({\n      method: 'PUT',\n      body: body\n    }, _types.METHOD.REPLACE);\n  };\n\n  this.fetch = function () {\n    return _this.read();\n  };\n\n  this.url = url;\n  this.pk = pk;\n  this._fetch = fetch;\n};\n\nexports.default = ItemHandler;","map":null,"metadata":{},"sourceType":"script"}