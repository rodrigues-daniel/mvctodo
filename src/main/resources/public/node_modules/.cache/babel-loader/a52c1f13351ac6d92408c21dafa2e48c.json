{"ast":null,"code":"var xtend = require('xtend');\n\nvar walk = require('acorn-walk');\n\nvar dynamicImportKey = require('acorn-dynamic-import').DynamicImportKey;\n\nvar base = xtend(walk.base);\n\nbase[dynamicImportKey] = function () {};\n\nfunction simple(node, visitors, baseVisitor, state, override) {\n  return walk.simple(node, visitors, baseVisitor || base, state, override);\n}\n\nfunction ancestor(node, visitors, baseVisitor, state) {\n  return walk.ancestor(node, visitors, baseVisitor || base, state);\n}\n\nfunction recursive(node, state, funcs, baseVisitor, override) {\n  return walk.recursive(node, state, funcs, baseVisitor || base, override);\n}\n\nfunction full(node, callback, baseVisitor, state, override) {\n  return walk.full(node, callback, baseVisitor || base, state, override);\n}\n\nfunction fullAncestor(node, callback, baseVisitor, state) {\n  return walk.fullAncestor(node, callback, baseVisitor || base, state);\n}\n\nfunction findNodeAt(node, start, end, test, baseVisitor, state) {\n  return walk.findNodeAt(node, start, end, test, baseVisitor || base, state);\n}\n\nfunction findNodeAround(node, pos, test, baseVisitor, state) {\n  return walk.findNodeAround(node, pos, test, baseVisitor || base, state);\n}\n\nfunction findNodeAfter(node, pos, test, baseVisitor, state) {\n  return walk.findNodeAfter(node, pos, test, baseVisitor || base, state);\n}\n\nfunction findNodeBefore(node, pos, test, baseVisitor, state) {\n  return walk.findNodeBefore(node, pos, test, baseVisitor || base, state);\n}\n\nfunction make(funcs, baseVisitor) {\n  return walk.make(funcs, baseVisitor || base);\n}\n\nexports.simple = simple;\nexports.ancestor = ancestor;\nexports.recursive = recursive;\nexports.full = full;\nexports.fullAncestor = fullAncestor;\nexports.findNodeAt = findNodeAt;\nexports.findNodeAround = findNodeAround;\nexports.findNodeAfter = findNodeAfter;\nexports.findNodeBefore = findNodeBefore;\nexports.make = make;\nexports.base = base;","map":null,"metadata":{},"sourceType":"script"}