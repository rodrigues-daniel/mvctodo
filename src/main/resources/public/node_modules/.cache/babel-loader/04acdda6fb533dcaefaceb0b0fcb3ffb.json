{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar createMiddleware = exports.createMiddleware = function createMiddleware(before, after) {\n  return {\n    before: before,\n    after: after\n  };\n};\n\nvar injectHeaders = exports.injectHeaders = function injectHeaders(headers) {\n  return createMiddleware(function (request) {\n    if (!request) {\n      return {\n        headers: headers\n      };\n    }\n\n    if (!request.hasOwnProperty('headers')) {\n      return _extends({}, request, {\n        headers: headers\n      });\n    }\n\n    return _extends({}, request, {\n      headers: _extends({}, request.headers, headers)\n    });\n  }, function (response) {\n    return response;\n  });\n};\n\nvar injectJsonHeaders = exports.injectJsonHeaders = function injectJsonHeaders() {\n  var onRequest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  var onResponse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return function (request) {\n    if (!request) {\n      request = {};\n    }\n\n    if (!request.hasOwnProperty('headers')) {\n      request.headers = {};\n    }\n\n    if (onRequest) {\n      request.headers['Accept'] = 'application/json';\n\n      if (!!request.body) {\n        request.body = JSON.stringify(request.body);\n      }\n    }\n\n    if (onResponse) {\n      request.headers['Content-Type'] = 'application/json; charset=utf-8';\n    }\n\n    return request;\n  };\n};\n\nvar parseJsonResponse = exports.parseJsonResponse = function parseJsonResponse() {\n  var destructive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  return function (response) {\n    if (destructive) {\n      return response.json();\n    }\n\n    var clone = response.clone();\n    return clone.json().then(function (data) {\n      response.data = data;\n      return response;\n    });\n  };\n};\n\nvar handleJson = exports.handleJson = function handleJson() {\n  var destructive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  return createMiddleware(injectJsonHeaders(), parseJsonResponse(destructive));\n};\n\nvar fetchWithMiddleware = exports.fetchWithMiddleware = function fetchWithMiddleware(middleware) {\n  return function (url) {\n    var request = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var before = middleware.map(function (_ref) {\n      var before = _ref.before;\n      return before;\n    });\n    var after = middleware.map(function (_ref2) {\n      var after = _ref2.after;\n      return after;\n    });\n    var modded = before.reduce(function (x, f) {\n      return f(x);\n    }, request);\n    var promise = fetch(url, modded).then(function (response) {\n      response.request = modded;\n      return response;\n    });\n    return after.reduce(function (p, f) {\n      return p.then(f);\n    }, promise);\n  };\n};\n\nexports.default = {\n  injectHeaders: injectHeaders,\n  injectJsonHeaders: injectJsonHeaders,\n  parseJsonResponse: parseJsonResponse,\n  handleJson: handleJson,\n  fetchWithMiddleware: fetchWithMiddleware\n};","map":null,"metadata":{},"sourceType":"script"}