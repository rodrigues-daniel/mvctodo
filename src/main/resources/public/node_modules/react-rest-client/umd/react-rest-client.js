(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) :
	typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) :
	(factory((global.ReactREST = {}),global.React));
}(this, (function (exports,React) { 'use strict';

var React__default = 'default' in React ? React['default'] : React;

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

var emptyFunction_1 = emptyFunction;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

{
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

var invariant_1 = invariant;

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';



/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction_1;

{
  var printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

var warning_1 = warning;

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var ReactPropTypesSecret_1 = ReactPropTypesSecret;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

{
  var invariant$1 = invariant_1;
  var warning$1 = warning_1;
  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
  var loggedTypeFailures = {};
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          invariant$1(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
        } catch (ex) {
          error = ex;
        }
        warning$1(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          warning$1(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

var checkPropTypes_1 = checkPropTypes;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';









var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret_1) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          invariant_1(
            false,
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
        } else if ("development" !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            warning_1(
              false,
              'You are manually calling a React.PropTypes validation ' +
              'function for the `%s` prop on `%s`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
              propFullName,
              componentName
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction_1.thatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      warning_1(false, 'Invalid argument supplied to oneOf, expected an instance of array.');
      return emptyFunction_1.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      warning_1(false, 'Invalid argument supplied to oneOfType, expected an instance of array.');
      return emptyFunction_1.thatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        warning_1(
          false,
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received %s at index %s.',
          getPostfixForTypeWarning(checker),
          i
        );
        return emptyFunction_1.thatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = objectAssign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes_1;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var propTypes = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

{
  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
    Symbol.for &&
    Symbol.for('react.element')) ||
    0xeac7;

  var isValidElement = function(object) {
    return typeof object === 'object' &&
      object !== null &&
      object.$$typeof === REACT_ELEMENT_TYPE;
  };

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = factoryWithTypeCheckers(isValidElement, throwOnDirectAccess);
}
});

var asyncGenerator = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function (fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function (value) {
      return new AwaitValue(value);
    }
  };
}();





var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};









var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};



var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};









var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var Client = function (_Component) {
  inherits(Client, _Component);

  function Client() {
    var _temp, _this, _ret;

    classCallCheck(this, Client);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.getChildContext = function () {
      var _this$props = _this.props,
          base = _this$props.base,
          middleware = _this$props.middleware;


      return {
        rest: _extends({}, _this.context.rest, {
          base: base,
          path: [],
          middleware: middleware
        })
      };
    }, _this.render = function () {
      return React__default.Children.only(_this.props.children);
    }, _temp), possibleConstructorReturn(_this, _ret);
  }

  return Client;
}(React.Component);

Client.propTypes = {
  base: propTypes.string.isRequired,
  middleware: propTypes.array,
  children: propTypes.node.isRequired
};
Client.defaultProps = {
  middleware: []
};
Client.contextTypes = {
  rest: propTypes.object
};
Client.childContextTypes = {
  rest: propTypes.object.isRequired
};

var METHOD = {
  BROWSE: '@@REACT_REST_METHOD/BROWSE',
  READ: '@@REACT_REST_METHOD/READ',
  EDIT: '@@REACT_REST_METHOD/EDIT',
  ADD: '@@REACT_REST_METHOD/ADD',
  DESTROY: '@@REACT_REST_METHOD/DESTROY',
  REPLACE: '@@REACT_REST_METHOD/REPLACE',
  WIPE: '@@REACT_REST_METHOD/WIPE'
};

var ItemHandler = function ItemHandler(url, pk, fetch) {
  var _this = this;

  classCallCheck(this, ItemHandler);

  this.call = function (request, type) {
    return _this._fetch(_this.url + '/' + _this.pk, _extends({}, request, { type: type }));
  };

  this.read = function () {
    return _this.call(METHOD.READ);
  };

  this.edit = function (body) {
    return _this.call({ method: 'PATCH', body: body }, METHOD.EDIT);
  };

  this.destroy = function () {
    return _this.call({ method: 'DELETE' }, METHOD.DESTROY);
  };

  this.replace = function (body) {
    return _this.call({ method: 'PUT', body: body }, METHOD.REPLACE);
  };

  this.fetch = function () {
    return _this.read();
  };

  this.url = url;
  this.pk = pk;
  this._fetch = fetch;
};

var ListHandler = function ListHandler(url, fetch, params) {
  classCallCheck(this, ListHandler);

  _initialiseProps$1.call(this);

  this.url = url;
  this._fetch = fetch;
  this.params = params;
};

var _initialiseProps$1 = function _initialiseProps() {
  var _this = this;

  this.params = {};

  this.buildParams = function (options) {
    var params = _extends({}, _this.params, options);

    if (!params || Object.keys(params).length === 0) {
      return '';
    }

    var search = new URLSearchParams(params);
    return '?' + search.toString();
  };

  this.call = function (url, request, type) {
    return _this._fetch(url, _extends({}, request, { type: type }));
  };

  this.browse = function (options) {
    return _this.call('' + _this.url + _this.buildParams(options), {}, METHOD.BROWSE);
  };

  this.read = function (pk) {
    return _this.call(_this.url + '/' + pk, {}, METHOD.READ);
  };

  this.edit = function (pk, body) {
    return _this.call(_this.url + '/' + pk, { method: 'PATCH', body: body }, METHOD.EDIT);
  };

  this.add = function (body) {
    return _this.call('' + _this.url, { method: 'POST', body: body }, METHOD.ADD);
  };

  this.destroy = function (pk) {
    return _this.call(_this.url + '/' + pk, { method: 'DELETE' }, METHOD.DESTROY);
  };

  this.replace = function (pk, body) {
    return _this.call(_this.url + '/' + pk, { method: 'PUT', body: body }, METHOD.REPLACE);
  };

  this.wipe = function (options) {
    return _this.call('' + _this.url + _this.buildParams(options), { method: 'DELETE' }, METHOD.WIPE);
  };

  this.fetch = function (options) {
    return _this.browse();
  };

  this.bind = function (pk) {
    return new ItemHandler(_this.url, pk, _this._fetch);
  };
};

var createMiddleware = function createMiddleware(before, after) {
  return { before: before, after: after };
};

var injectHeaders = function injectHeaders(headers) {
  return createMiddleware(function (request) {
    if (!request) {
      return { headers: headers };
    }

    if (!request.hasOwnProperty('headers')) {
      return _extends({}, request, {
        headers: headers
      });
    }

    return _extends({}, request, {
      headers: _extends({}, request.headers, headers)
    });
  }, function (response) {
    return response;
  });
};

var injectJsonHeaders = function injectJsonHeaders() {
  var onRequest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var onResponse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  return function (request) {
    if (!request) {
      request = {};
    }

    if (!request.hasOwnProperty('headers')) {
      request.headers = {};
    }

    if (onRequest) {
      request.headers['Accept'] = 'application/json';

      if (!!request.body) {
        request.body = JSON.stringify(request.body);
      }
    }

    if (onResponse) {
      request.headers['Content-Type'] = 'application/json; charset=utf-8';
    }

    return request;
  };
};

var parseJsonResponse = function parseJsonResponse() {
  var destructive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return function (response) {
    if (destructive) {
      return response.json();
    }

    var clone = response.clone();

    return clone.json().then(function (data) {
      response.data = data;
      return response;
    });
  };
};

var handleJson = function handleJson() {
  var destructive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return createMiddleware(injectJsonHeaders(), parseJsonResponse(destructive));
};

var fetchWithMiddleware = function fetchWithMiddleware(middleware) {
  return function (url) {
    var request = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var before = middleware.map(function (_ref) {
      var before = _ref.before;
      return before;
    });
    var after = middleware.map(function (_ref2) {
      var after = _ref2.after;
      return after;
    });
    var modded = before.reduce(function (x, f) {
      return f(x);
    }, request);
    var promise = fetch(url, modded).then(function (response) {
      response.request = modded;
      return response;
    });

    return after.reduce(function (p, f) {
      return p.then(f);
    }, promise);
  };
};

var middleware = {
  injectHeaders: injectHeaders,
  injectJsonHeaders: injectJsonHeaders,
  parseJsonResponse: parseJsonResponse,
  handleJson: handleJson,
  fetchWithMiddleware: fetchWithMiddleware
};

var fillDefaults = function fillDefaults(object) {
  return _extends({
    middleware: [],
    options: {},
    noFetchOnMount: false,
    suppressUpdate: false,
    onChange: function onChange() {}
  }, object);
};

var Endpoints = function (_Component) {
  inherits(Endpoints, _Component);

  function Endpoints(props, context) {
    classCallCheck(this, Endpoints);

    var _this = possibleConstructorReturn(this, _Component.call(this, props, context));

    _initialiseProps.call(_this);

    _this.state = Object.keys(props.configs).map(function (name) {
      var _ref;

      return _ref = {}, _ref[name] = false, _ref;
    }).reduce(function (prev, curr) {
      return _extends({}, prev, curr);
    });
    return _this;
  }

  return Endpoints;
}(React.Component);

Endpoints.propTypes = {
  component: propTypes.func,
  render: propTypes.func,
  children: propTypes.oneOfType([propTypes.func, propTypes.node]),

  configs: propTypes.object.isRequired,
  persist: propTypes.string,
  middleware: propTypes.array,

  onChange: propTypes.func
};
Endpoints.defaultProps = {
  middleware: [],
  onChange: function onChange() {}
};
Endpoints.contextTypes = {
  rest: propTypes.shape({
    base: propTypes.string.isRequired,
    path: propTypes.array.isRequired,
    middleware: propTypes.array.isRequired
  })
};
Endpoints.childContextTypes = {
  rest: propTypes.object.isRequired
};

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.handlers = {};

  this.getChildContext = function () {
    var _props = _this2.props,
        configs = _props.configs,
        persist = _props.persist;
    var _context$rest = _this2.context.rest,
        base = _context$rest.base,
        contextPath = _context$rest.path;


    var selectPath = function selectPath(paths, path) {
      if (path[0] === '/') {
        return [path.slice(1)];
      }
      return [].concat(paths, [path]);
    };

    var addPk = function addPk(paths, pk) {
      if (pk) {
        return [].concat(paths, [pk]);
      }
      return paths;
    };

    var path = persist ? addPk(selectPath(contextPath, configs[persist].path), configs[persist].pk) : contextPath;

    return {
      rest: _extends({}, _this2.context.rest, {
        base: base,
        path: path
      })
    };
  };

  this.componentWillMount = function () {
    _this2.createHandlers(_this2.props, _this2.context);
    Object.keys(_this2.props.configs).forEach(function (name) {
      if (!_this2.props.configs[name].noFetchOnMount) {
        _this2.handlers[name].fetch(_this2.props.options);
      }
    });
  };

  this.componentWillReceiveProps = function (nextProps, nextContext) {
    _this2.createHandlers(nextProps, nextContext);
    Object.keys(nextProps.configs).forEach(function (name) {
      if (!nextProps.configs[name].noFetchOnMount) {
        _this2.handlers[name].fetch(nextProps.options);
      }
    });
  };

  this.componentDidUpdate = function (prevProps, prevState) {
    var _props2 = _this2.props,
        configs = _props2.configs,
        onChange = _props2.onChange;


    var data = Object.keys(configs).map(function (name) {
      var _ref2;

      return _ref2 = {}, _ref2[name] = {
        response: _this2.state[name],
        handlers: _this2.handlers[name]
      }, _ref2;
    }).reduce(function (prev, curr) {
      return _extends({}, prev, curr);
    });

    Object.keys(data).forEach(function (name) {
      if (JSON.stringify(_this2.state[name]) !== JSON.stringify(prevState[name])) {
        fillDefaults(configs[name]).onChange(data[name]);
      }
    });

    if (JSON.stringify(_this2.state) !== JSON.stringify(prevState)) {
      onChange(data);
    }
  };

  this.createHandlers = function (props, context) {
    var _props3 = _this2.props,
        configs = _props3.configs,
        propsMiddleware = _props3.middleware;


    Object.keys(configs).forEach(function (name) {
      var _fillDefaults = fillDefaults(configs[name]),
          pk = _fillDefaults.pk,
          propsPath = _fillDefaults.path,
          options = _fillDefaults.options,
          configMiddleware = _fillDefaults.middleware,
          suppressUpdate = _fillDefaults.suppressUpdate;

      var _context$rest2 = context.rest,
          base = _context$rest2.base,
          contextPath = _context$rest2.path,
          contextMiddleware = _context$rest2.middleware;


      var path = propsPath[0] === '/' ? propsPath.slice(1) : [].concat(contextPath, [propsPath]).join('/');
      var url = base + '/' + path;

      if (!pk) {
        var update = createMiddleware(function (request) {
          return request;
        }, function (response) {
          if (response.request.type !== METHOD.BROWSE) {
            _this2.handlers[name].browse();
          } else {
            if (!suppressUpdate) {
              var _this2$setState;

              _this2.setState((_this2$setState = {}, _this2$setState[name] = response, _this2$setState));
            }
          }
          return response;
        });

        var middleware$$1 = [].concat(contextMiddleware, propsMiddleware, configMiddleware, [update]);
        var altfetch = fetchWithMiddleware(middleware$$1);
        _this2.handlers[name] = new ListHandler(url, altfetch, options);
      } else {
        var _update = createMiddleware(function (request) {
          return request;
        }, function (response) {
          if (response.request.type === METHOD.DESTROY) {
            _this2.handlers[name].read();
          } else {
            if (!suppressUpdate) {
              var _this2$setState2;

              _this2.setState((_this2$setState2 = {}, _this2$setState2[name] = response, _this2$setState2));
            }
          }
          return response;
        });

        var _middleware = [].concat(contextMiddleware, propsMiddleware, configMiddleware, [_update]);
        var _altfetch = fetchWithMiddleware(_middleware);
        _this2.handlers[name] = new ItemHandler(url, pk, _altfetch);
      }
    });
  };

  this.render = function () {
    var _props4 = _this2.props,
        component = _props4.component,
        render = _props4.render,
        children = _props4.children,
        configs = _props4.configs;

    var props = Object.keys(configs).map(function (name) {
      var _ref3;

      return _ref3 = {}, _ref3[name] = {
        response: _this2.state[name],
        handlers: _this2.handlers[name]
      }, _ref3;
    }).reduce(function (prev, curr) {
      return _extends({}, prev, curr);
    });

    return component ? React__default.createElement(component, props) : render ? render(props) : children ? typeof children === 'function' ? children(props) : !Array.isArray(children) || children.length ? React__default.cloneElement(React__default.Children.only(children), props) : null : null;
  };
};

var Endpoint = function (_Component) {
  inherits(Endpoint, _Component);

  function Endpoint() {
    var _temp, _this, _ret;

    classCallCheck(this, Endpoint);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.render = function () {
      var _this$props = _this.props,
          component = _this$props.component,
          _render = _this$props.render,
          children = _this$props.children,
          config = objectWithoutProperties(_this$props, ['component', 'render', 'children']);


      return React__default.createElement(Endpoints, {
        configs: { props: config },
        render: function render(_ref) {
          var props = _ref.props;
          return component ? React__default.createElement(component, props) : _render ? _render(props) : children ? typeof children === 'function' ? children(props) : !Array.isArray(children) || children.length ? React__default.cloneElement(React__default.Children.only(children), props) : null : null;
        }
      });
    }, _temp), possibleConstructorReturn(_this, _ret);
  }

  return Endpoint;
}(React.Component);

Endpoint.propTypes = {
  component: propTypes.func,
  render: propTypes.func,
  children: propTypes.oneOfType([propTypes.func, propTypes.node]),

  path: propTypes.string.isRequired,
  pk: propTypes.string,
  middleware: propTypes.array,

  options: propTypes.object,

  noFetchOnMount: propTypes.bool,
  suppressUpdate: propTypes.bool,

  persist: propTypes.bool,

  onChange: propTypes.func
};
Endpoint.defaultProps = {
  middleware: [],

  options: {},

  noFetchOnMount: false,
  suppressUpdate: false,

  persist: true,

  onChange: function onChange() {}
};

var withEndpoint = function withEndpoint(props) {
  return function (Component$$1) {
    return React__default.createElement(Endpoint, _extends({}, props, { component: Component$$1 }));
  };
};
var withEndpoints = function withEndpoints(props) {
  return function (Component$$1) {
    return React__default.createElement(Endpoints, _extends({}, props, { component: Component$$1 }));
  };
};

exports.Client = Client;
exports.Endpoint = Endpoint;
exports.Endpoints = Endpoints;
exports.withEndpoint = withEndpoint;
exports.withEndpoints = withEndpoints;
exports.middleware = middleware;

Object.defineProperty(exports, '__esModule', { value: true });

})));
