'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _ListHandler = require('./ListHandler');

var _ListHandler2 = _interopRequireDefault(_ListHandler);

var _ItemHandler = require('./ItemHandler');

var _ItemHandler2 = _interopRequireDefault(_ItemHandler);

var _middleware2 = require('./middleware');

var _types = require('./types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var fillDefaults = function fillDefaults(object) {
  return _extends({
    middleware: [],
    options: {},
    noFetchOnMount: false,
    suppressUpdate: false,
    onChange: function onChange() {}
  }, object);
};

var Endpoints = function (_Component) {
  _inherits(Endpoints, _Component);

  function Endpoints(props, context) {
    _classCallCheck(this, Endpoints);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

    _initialiseProps.call(_this);

    _this.state = Object.keys(props.configs).map(function (name) {
      var _ref;

      return _ref = {}, _ref[name] = false, _ref;
    }).reduce(function (prev, curr) {
      return _extends({}, prev, curr);
    });
    return _this;
  }

  return Endpoints;
}(_react.Component);

Endpoints.propTypes = {
  component: _propTypes2.default.func,
  render: _propTypes2.default.func,
  children: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.node]),

  configs: _propTypes2.default.object.isRequired,
  persist: _propTypes2.default.string,
  middleware: _propTypes2.default.array,

  onChange: _propTypes2.default.func
};
Endpoints.defaultProps = {
  middleware: [],
  onChange: function onChange() {}
};
Endpoints.contextTypes = {
  rest: _propTypes2.default.shape({
    base: _propTypes2.default.string.isRequired,
    path: _propTypes2.default.array.isRequired,
    middleware: _propTypes2.default.array.isRequired
  })
};
Endpoints.childContextTypes = {
  rest: _propTypes2.default.object.isRequired
};

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.handlers = {};

  this.getChildContext = function () {
    var _props = _this2.props,
        configs = _props.configs,
        persist = _props.persist;
    var _context$rest = _this2.context.rest,
        base = _context$rest.base,
        contextPath = _context$rest.path;


    var selectPath = function selectPath(paths, path) {
      if (path[0] === '/') {
        return [path.slice(1)];
      }
      return [].concat(paths, [path]);
    };

    var addPk = function addPk(paths, pk) {
      if (pk) {
        return [].concat(paths, [pk]);
      }
      return paths;
    };

    var path = persist ? addPk(selectPath(contextPath, configs[persist].path), configs[persist].pk) : contextPath;

    return {
      rest: _extends({}, _this2.context.rest, {
        base: base,
        path: path
      })
    };
  };

  this.componentWillMount = function () {
    _this2.createHandlers(_this2.props, _this2.context);
    Object.keys(_this2.props.configs).forEach(function (name) {
      if (!_this2.props.configs[name].noFetchOnMount) {
        _this2.handlers[name].fetch(_this2.props.options);
      }
    });
  };

  this.componentWillReceiveProps = function (nextProps, nextContext) {
    _this2.createHandlers(nextProps, nextContext);
    Object.keys(nextProps.configs).forEach(function (name) {
      if (!nextProps.configs[name].noFetchOnMount) {
        _this2.handlers[name].fetch(nextProps.options);
      }
    });
  };

  this.componentDidUpdate = function (prevProps, prevState) {
    var _props2 = _this2.props,
        configs = _props2.configs,
        onChange = _props2.onChange;


    var data = Object.keys(configs).map(function (name) {
      var _ref2;

      return _ref2 = {}, _ref2[name] = {
        response: _this2.state[name],
        handlers: _this2.handlers[name]
      }, _ref2;
    }).reduce(function (prev, curr) {
      return _extends({}, prev, curr);
    });

    Object.keys(data).forEach(function (name) {
      if (JSON.stringify(_this2.state[name]) !== JSON.stringify(prevState[name])) {
        fillDefaults(configs[name]).onChange(data[name]);
      }
    });

    if (JSON.stringify(_this2.state) !== JSON.stringify(prevState)) {
      onChange(data);
    }
  };

  this.createHandlers = function (props, context) {
    var _props3 = _this2.props,
        configs = _props3.configs,
        propsMiddleware = _props3.middleware;


    Object.keys(configs).forEach(function (name) {
      var _fillDefaults = fillDefaults(configs[name]),
          pk = _fillDefaults.pk,
          propsPath = _fillDefaults.path,
          options = _fillDefaults.options,
          configMiddleware = _fillDefaults.middleware,
          suppressUpdate = _fillDefaults.suppressUpdate;

      var _context$rest2 = context.rest,
          base = _context$rest2.base,
          contextPath = _context$rest2.path,
          contextMiddleware = _context$rest2.middleware;


      var path = propsPath[0] === '/' ? propsPath.slice(1) : [].concat(contextPath, [propsPath]).join('/');
      var url = base + '/' + path;

      if (!pk) {
        var update = (0, _middleware2.createMiddleware)(function (request) {
          return request;
        }, function (response) {
          if (response.request.type !== _types.METHOD.BROWSE) {
            _this2.handlers[name].browse();
          } else {
            if (!suppressUpdate) {
              var _this2$setState;

              _this2.setState((_this2$setState = {}, _this2$setState[name] = response, _this2$setState));
            }
          }
          return response;
        });

        var middleware = [].concat(contextMiddleware, propsMiddleware, configMiddleware, [update]);
        var altfetch = (0, _middleware2.fetchWithMiddleware)(middleware);
        _this2.handlers[name] = new _ListHandler2.default(url, altfetch, options);
      } else {
        var _update = (0, _middleware2.createMiddleware)(function (request) {
          return request;
        }, function (response) {
          if (response.request.type === _types.METHOD.DESTROY) {
            _this2.handlers[name].read();
          } else {
            if (!suppressUpdate) {
              var _this2$setState2;

              _this2.setState((_this2$setState2 = {}, _this2$setState2[name] = response, _this2$setState2));
            }
          }
          return response;
        });

        var _middleware = [].concat(contextMiddleware, propsMiddleware, configMiddleware, [_update]);
        var _altfetch = (0, _middleware2.fetchWithMiddleware)(_middleware);
        _this2.handlers[name] = new _ItemHandler2.default(url, pk, _altfetch);
      }
    });
  };

  this.render = function () {
    var _props4 = _this2.props,
        component = _props4.component,
        render = _props4.render,
        children = _props4.children,
        configs = _props4.configs;

    var props = Object.keys(configs).map(function (name) {
      var _ref3;

      return _ref3 = {}, _ref3[name] = {
        response: _this2.state[name],
        handlers: _this2.handlers[name]
      }, _ref3;
    }).reduce(function (prev, curr) {
      return _extends({}, prev, curr);
    });

    return component ? _react2.default.createElement(component, props) : render ? render(props) : children ? typeof children === 'function' ? children(props) : !Array.isArray(children) || children.length ? _react2.default.cloneElement(_react2.default.Children.only(children), props) : null : null;
  };
};

exports.default = Endpoints;