{"version":3,"sources":["logo.svg","Lista.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Lista","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateState","e","axios","get","then","res","console","log","_embedded","todoModels","texto","keyEnter","keyCode","preventDefault","state","marcado","vazio","_links","self","href","todoModel","bind","assertThisInitialized","react_default","a","createElement","name","type","value","entrada","className","aria-label","onChange","onKeyDown","autofocus","map","item","Component","App","src_Lista","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wLCyJzBC,cAjJX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAEdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAyDXQ,YAAc,SAAAC,GAEbC,IAAMC,IAAI,oCACTC,KAAK,SAAAC,GAILC,QAAQC,IAAIF,EAAIG,UAAUC,WAAW,GAAGC,UAlEvBjB,EAgFnBkB,SAAW,SAAAV,GAEW,KAAdA,EAAEW,SAEDX,EAAEY,kBA9ENX,IAAMC,IAAI,oCACTC,KAAK,SAAAC,GAGFC,QAAQC,IAAIF,EAAIG,UAAUC,WAAW,GAAGC,SAS7CjB,EAAKqB,MAAQ,CACZN,UAAY,CAAEC,WAAa,CAAC,CAC5BM,SAAY,EACZC,OAAU,EACVN,MAAU,+BACVO,OAAW,CACTC,KAAS,CACPC,KAAS,0CAEXC,UAAc,CACZD,KAAS,4CAIf,CACEJ,SAAY,EACZC,OAAU,EACVN,MAAU,6BACVO,OAAW,CACTC,KAAS,CACPC,KAAS,0CAEXC,UAAc,CACZD,KAAS,+CAUd1B,EAAKO,YAAcP,EAAKO,YAAYqB,KAAjB3B,OAAA4B,EAAA,EAAA5B,QAAA4B,EAAA,EAAA5B,CAAAD,KACnBA,EAAKkB,SAAWlB,EAAKkB,SAASU,KAAd3B,OAAA4B,EAAA,EAAA5B,QAAA4B,EAAA,EAAA5B,CAAAD,KArDDA,wEAiGjB,OAGG8B,EAAAC,EAAAC,cAAA,WAEKF,EAAAC,EAAAC,cAAA,SACWC,KAAK,WACLC,KAAK,OACLC,MAAOhC,KAAKkB,MAAMe,QAClBC,UAAU,eACVC,aAAW,QACXC,SAAUpC,KAAKI,YACfiC,UAAWrC,KAAKe,SAChBuB,UAAU,SAI9BX,EAAAC,EAAAC,cAAA,SAAOK,UAAU,SAIdlC,KAAKkB,MAAMN,UAAUC,WAAW0B,IAAI,SAACC,GAAD,OAGrCb,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,aAAhB,KACAJ,EAAAC,EAAAC,cAAA,eAAOW,EAAK1B,MAAZ,OACAa,EAAAC,EAAAC,cAAA,eAAMF,EAAAC,EAAAC,cAAA,0CA9HMY,aCuBLC,mLApBX,OAGEf,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,oBACXP,EAAAC,EAAAC,cAAA,MAAIK,UAAU,eAAd,YAGQP,EAAAC,EAAAC,cAACc,EAAD,gBAbJF,aCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,KAAK,SAAAiD,GACjCA,EAAaC","file":"static/js/main.66512e82.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{Component} from 'react';\nimport axios from 'axios';\n//import { AxiosProvider, Request, Get, Delete, Head, Post, Put, Patch, withAxios } from  'react-axios';\n\n \n\nclass Lista extends Component{\n\n    constructor(props){\n\n        super(props);\n        \n \n\n        axios.get('192.168.0.58:8080/api/todoModels')\n        .then(res => {\n         //const tmodels = res;\n\n            console.log(res._embedded.todoModels[0].texto);\n\n          //alert(\"Alerta\");\n\n\n         // this.setState(tmodels);\n        })\n\n\n       this.state = {\n        _embedded : { todoModels : [{\n        \"marcado\" : true,\n        \"vazio\" : true,\n        \"texto\" : \"Teste Realizado com sucesso!\",\n        \"_links\" : {\n          \"self\" : {\n            \"href\" : \"http://localhost:8080/api/todoModels/1\"\n          },\n          \"todoModel\" : {\n            \"href\" : \"http://localhost:8080/api/todoModels/1\"\n          }\n        }\n      },\n      {\n        \"marcado\" : true,\n        \"vazio\" : true,\n        \"texto\" : \"Segundo Teste com sucesso!\",\n        \"_links\" : {\n          \"self\" : {\n            \"href\" : \"http://localhost:8080/api/todoModels/1\"\n          },\n          \"todoModel\" : {\n            \"href\" : \"http://localhost:8080/api/todoModels/1\"\n          }\n        }\n      }] }}\n\n       \n\n    \n        \n       \n       this.updateState = this.updateState.bind(this);\n       this.keyEnter = this.keyEnter.bind(this);\n\n       \n     \n    }\n\n   updateState = e => {                 \n             \n    axios.get('192.168.0.58:8080/api/todoModels')\n    .then(res => {\n     //const tmodels = res;\n\n       \n     console.log(res._embedded.todoModels[0].texto);\n\n      //alert(\"Alerta\");\n\n\n     // this.setState(tmodels);\n    })\n\n            \n       // this.setState({marcado: e.target.value});\n            \n    \n   }\n\n   keyEnter = e => {\n\n        if(e.keyCode === 13){\n            \n            e.preventDefault();            \n            //this.setState({marcado:\"\",items:[...this.state.items,this.state.marcado]})\n\n         }\n\n\n   }\n\n\n   \n\n    render(){\n\n     return (       \n                    \n     \n        <div>            \n      \n             <input \n                        name=\"lentrada\"\n                        type=\"text\"\n                        value={this.state.entrada}\n                        className=\"form-control\"\n                        aria-label=\"Large\"\n                        onChange={this.updateState}\n                        onKeyDown={this.keyEnter}\n                        autofocus=\"true\" \n                    />    \n\n\n    <table className=\"table\">\n      \n     \n     \n      {this.state._embedded.todoModels.map((item) => (\n\n\n      <tr> \n        <td><input type=\"checkbox\" /> </td>\n        <td>  {item.texto}   </td>\n        <td>  <button> Cancelar  </button></td>\n      </tr>\n                                                    \n                                        \n                                                  \n                                          \n                                ))}     \n                               \n\n                               </table>\n               \n \n \n      </div> \n      \n  \n  \n     )\n    }\n}\n\nexport default Lista;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport Lista from './Lista';\n\n\nclass App extends Component {\n\n  render() {\n\n    return (\n      \n         \n      <div className=\"container\">  \n        <div className=\"row\">\n          <div className=\"col-md-7 mx-auto\">\n              <h1 className=\"text-center\">MVC Todo</h1>\n\n                \n                      <Lista />\n                       \n          </div>\n           \n        </div>\n      </div>\n          \n    )     \n  }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}