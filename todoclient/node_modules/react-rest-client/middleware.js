'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var createMiddleware = exports.createMiddleware = function createMiddleware(before, after) {
  return { before: before, after: after };
};

var injectHeaders = exports.injectHeaders = function injectHeaders(headers) {
  return createMiddleware(function (request) {
    if (!request) {
      return { headers: headers };
    }

    if (!request.hasOwnProperty('headers')) {
      return _extends({}, request, {
        headers: headers
      });
    }

    return _extends({}, request, {
      headers: _extends({}, request.headers, headers)
    });
  }, function (response) {
    return response;
  });
};

var injectJsonHeaders = exports.injectJsonHeaders = function injectJsonHeaders() {
  var onRequest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var onResponse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  return function (request) {
    if (!request) {
      request = {};
    }

    if (!request.hasOwnProperty('headers')) {
      request.headers = {};
    }

    if (onRequest) {
      request.headers['Accept'] = 'application/json';

      if (!!request.body) {
        request.body = JSON.stringify(request.body);
      }
    }

    if (onResponse) {
      request.headers['Content-Type'] = 'application/json; charset=utf-8';
    }

    return request;
  };
};

var parseJsonResponse = exports.parseJsonResponse = function parseJsonResponse() {
  var destructive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return function (response) {
    if (destructive) {
      return response.json();
    }

    var clone = response.clone();

    return clone.json().then(function (data) {
      response.data = data;
      return response;
    });
  };
};

var handleJson = exports.handleJson = function handleJson() {
  var destructive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return createMiddleware(injectJsonHeaders(), parseJsonResponse(destructive));
};

var fetchWithMiddleware = exports.fetchWithMiddleware = function fetchWithMiddleware(middleware) {
  return function (url) {
    var request = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var before = middleware.map(function (_ref) {
      var before = _ref.before;
      return before;
    });
    var after = middleware.map(function (_ref2) {
      var after = _ref2.after;
      return after;
    });
    var modded = before.reduce(function (x, f) {
      return f(x);
    }, request);
    var promise = fetch(url, modded).then(function (response) {
      response.request = modded;
      return response;
    });

    return after.reduce(function (p, f) {
      return p.then(f);
    }, promise);
  };
};

exports.default = {
  injectHeaders: injectHeaders,
  injectJsonHeaders: injectJsonHeaders,
  parseJsonResponse: parseJsonResponse,
  handleJson: handleJson,
  fetchWithMiddleware: fetchWithMiddleware
};