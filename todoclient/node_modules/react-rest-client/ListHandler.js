'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _ItemHandler = require('./ItemHandler');

var _ItemHandler2 = _interopRequireDefault(_ItemHandler);

var _types = require('./types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ListHandler = function ListHandler(url, fetch, params) {
  _classCallCheck(this, ListHandler);

  _initialiseProps.call(this);

  this.url = url;
  this._fetch = fetch;
  this.params = params;
};

var _initialiseProps = function _initialiseProps() {
  var _this = this;

  this.params = {};

  this.buildParams = function (options) {
    var params = _extends({}, _this.params, options);

    if (!params || Object.keys(params).length === 0) {
      return '';
    }

    var search = new URLSearchParams(params);
    return '?' + search.toString();
  };

  this.call = function (url, request, type) {
    return _this._fetch(url, _extends({}, request, { type: type }));
  };

  this.browse = function (options) {
    return _this.call('' + _this.url + _this.buildParams(options), {}, _types.METHOD.BROWSE);
  };

  this.read = function (pk) {
    return _this.call(_this.url + '/' + pk, {}, _types.METHOD.READ);
  };

  this.edit = function (pk, body) {
    return _this.call(_this.url + '/' + pk, { method: 'PATCH', body: body }, _types.METHOD.EDIT);
  };

  this.add = function (body) {
    return _this.call('' + _this.url, { method: 'POST', body: body }, _types.METHOD.ADD);
  };

  this.destroy = function (pk) {
    return _this.call(_this.url + '/' + pk, { method: 'DELETE' }, _types.METHOD.DESTROY);
  };

  this.replace = function (pk, body) {
    return _this.call(_this.url + '/' + pk, { method: 'PUT', body: body }, _types.METHOD.REPLACE);
  };

  this.wipe = function (options) {
    return _this.call('' + _this.url + _this.buildParams(options), { method: 'DELETE' }, _types.METHOD.WIPE);
  };

  this.fetch = function (options) {
    return _this.browse();
  };

  this.bind = function (pk) {
    return new _ItemHandler2.default(_this.url, pk, _this._fetch);
  };
};

exports.default = ListHandler;